#!/bin/bash
# Pre-populate any constant variables here
vpnname=""
protocol=""
senderemail=""
destinationemail=""

# Set the client anonymous client name. Can be overridden by specifying -v, but lowers anonimity
name=client
i=1
if [[ -e /etc/openvpn/client-profiles/$name$i.ovpn ]] ; then
  while
    [[ -e /etc/openvpn/client-profiles/$name$i.ovpn ]] ; do
      (( i++ ))
  done
  vpnclient=$name$i
else
  vpnclient=$name$i
fi

# Usage
print_usage() {
  printf "Usage: gen-ovpn -v [client name] -V [vpn server name] -p [protocol] -s [sender email] -e [destination email]

  The mail command must be available for this script to work successfully and is expected to use an already configured
  MTA that relays mail to a mail server that the relay is authorised to use.

  -v    Name given to the client .ovpn profile and associated certificates e.g. client1 (optional, lowers anonimity)
  -V    Friendly name of the VPN server e.g. PersonalVPN
  -p    Specify UDP or TCP for either UDP port 1194 or TCP port 443 for the VPN connection
  -s    Email address displayed as the sender of the profile email
  -e    The email address the .ovpn profile should be sent to
  -h    Prints these instructions
"
}

# Flags
while getopts 'v:V:p:s:e:h' flag; do
  case "${flag}" in
    v) vpnclient="${OPTARG}" ;;
    V) vpnname="${OPTARG}" ;;
    p) protocol="${OPTARG}" ;;
    s) senderemail="${OPTARG}" ;;
    e) destinationemail="${OPTARG}" ;;
    h) print_usage
       exit 0 ;;
    *) print_usage
       exit 0 ;;
  esac
done

# Check that mail is available as a command
if ! command -v mail &> /dev/null
then
    echo "The mail command could not be found. Please install the correct package for your operating system that contains mail"
    exit 1
fi

# Check all required variables are present and protocol is correct
if [[ -z "$vpnname" && -z "$protocol" && -z "$senderemail" && -z "$destinationemail" ]]; then
  echo -e "ERROR. A VPN name, protocol, sender email address, and destination email address must be specified.\n"; echo ""
  exit 1
elif ! [[ $protocol =~ ^(UDP|udp|TCP|tcp)$ ]]; then
  echo -e "ERROR. Please specify ether TCP or UDP protocol using -p\n"
  exit 1
fi

# Check either tcp or udp has been chosen and generate the certless .ovpn profile or exit because value doesn't match
if [[ $protocol =~ ^(UDP|udp)$ ]]; then
  cp /etc/openvpn/template-profiles/profile.ovpn /etc/openvpn/client-profiles/"$vpnclient".ovpn
  sed -i -e "s/port.*/port\ 1194/g" /etc/openvpn/client-profiles/"$vpnclient".ovpn
  sed -i -e "s/proto.*/proto\ udp/g" /etc/openvpn/client-profiles/"$vpnclient".ovpn
elif [[ $protocol =~ ^(TCP|tcp)$ ]]; then
  cp /etc/openvpn/template-profiles/profile.ovpn /etc/openvpn/client-profiles/"$vpnclient".ovpn
fi

# Check if the given vpn client name already has a cert
if [[ ! -f /etc/easy-rsa/pki/issued/"$vpnclient".crt ]]; then
  cd /etc/easy-rsa || return
  export EASYRSA_REQ_CN="$vpnclient"
  ./easyrsa --batch gen-req "$vpnclient" nopass
  ./easyrsa --batch sign-req client "$vpnclient"
fi

# Add the certs and keys to the .ovpn profile
{
  echo -e " \n<ca>"
  cat /etc/openvpn/server/ca.crt
  echo -e "</ca>\n<cert>"
  cat /etc/easy-rsa/pki/issued/"$vpnclient".crt
  echo -e "</cert>\n<key>"
  cat /etc/easy-rsa/pki/private/"$vpnclient".key
  echo -e "</key>\n<tls-crypt>"
  cat /etc/openvpn/server/ta.key
  echo "</tls-crypt>"
} >>/etc/openvpn/client-profiles/"$vpnclient".ovpn

# Send the .ovpn profile to the chosen email address
printf "Hello,\n\nHere is your requested OVPN profile for %s. \n" "$vpnname" | mail \
  -s "$vpnname OVPN Profile" \
  -a "FROM: ""$vpnname"" <""$senderemail"">" \
  -A /etc/openvpn/client-profiles/"$vpnclient".ovpn \
  "$destinationemail"
